# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  managedMalls(where: MallWhereInput! = {}, orderBy: [MallOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MallWhereUniqueInput): [Mall!]
  managedMallsCount(where: MallWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringNullableFilter
  managedMalls: MallManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input MallManyRelationFilter {
  every: MallWhereInput
  some: MallWhereInput
  none: MallWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  managedMalls: MallRelateToManyForUpdateInput
}

input MallRelateToManyForUpdateInput {
  disconnect: [MallWhereUniqueInput!]
  set: [MallWhereUniqueInput!]
  create: [MallCreateInput!]
  connect: [MallWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  managedMalls: MallRelateToManyForCreateInput
}

input MallRelateToManyForCreateInput {
  create: [MallCreateInput!]
  connect: [MallWhereUniqueInput!]
}

type Mall {
  id: ID!
  name: String
  city: String
  address: String
  managers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  managersCount(where: UserWhereInput! = {}): Int
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreWhereUniqueInput): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
}

input MallWhereUniqueInput {
  id: ID
}

input MallWhereInput {
  AND: [MallWhereInput!]
  OR: [MallWhereInput!]
  NOT: [MallWhereInput!]
  id: IDFilter
  name: StringFilter
  city: StringFilter
  address: StringFilter
  managers: UserManyRelationFilter
  stores: StoreManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input StoreManyRelationFilter {
  every: StoreWhereInput
  some: StoreWhereInput
  none: StoreWhereInput
}

input MallOrderByInput {
  id: OrderDirection
  name: OrderDirection
  city: OrderDirection
  address: OrderDirection
}

input MallUpdateInput {
  name: String
  city: String
  address: String
  managers: UserRelateToManyForUpdateInput
  stores: StoreRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input StoreRelateToManyForUpdateInput {
  disconnect: [StoreWhereUniqueInput!]
  set: [StoreWhereUniqueInput!]
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input MallUpdateArgs {
  where: MallWhereUniqueInput!
  data: MallUpdateInput!
}

input MallCreateInput {
  name: String
  city: String
  address: String
  managers: UserRelateToManyForCreateInput
  stores: StoreRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input StoreRelateToManyForCreateInput {
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

type Store {
  id: ID!
  name: String
  storeNumber: String
  floor: String
  area: Decimal
  rentAmount: Decimal
  mall: Mall
  client: Client
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

scalar Decimal

input StoreWhereUniqueInput {
  id: ID
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  name: StringFilter
  storeNumber: StringFilter
  floor: StringFilter
  area: DecimalFilter
  rentAmount: DecimalFilter
  mall: MallWhereInput
  client: ClientWhereInput
  payments: PaymentManyRelationFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input StoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  storeNumber: OrderDirection
  floor: OrderDirection
  area: OrderDirection
  rentAmount: OrderDirection
}

input StoreUpdateInput {
  name: String
  storeNumber: String
  floor: String
  area: Decimal
  rentAmount: Decimal
  mall: MallRelateToOneForUpdateInput
  client: ClientRelateToOneForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
}

input MallRelateToOneForUpdateInput {
  create: MallCreateInput
  connect: MallWhereUniqueInput
  disconnect: Boolean
}

input ClientRelateToOneForUpdateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  name: String
  storeNumber: String
  floor: String
  area: Decimal
  rentAmount: Decimal
  mall: MallRelateToOneForCreateInput
  client: ClientRelateToOneForCreateInput
  payments: PaymentRelateToManyForCreateInput
}

input MallRelateToOneForCreateInput {
  create: MallCreateInput
  connect: MallWhereUniqueInput
}

input ClientRelateToOneForCreateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

type Client {
  id: ID!
  name: String
  companyName: String
  email: String
  phone: String
  taxNumber: String
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreWhereUniqueInput): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
}

input ClientWhereUniqueInput {
  id: ID
  email: String
  taxNumber: String
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  name: StringFilter
  companyName: StringFilter
  email: StringFilter
  phone: StringFilter
  taxNumber: StringFilter
  stores: StoreManyRelationFilter
}

input ClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  companyName: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  taxNumber: OrderDirection
}

input ClientUpdateInput {
  name: String
  companyName: String
  email: String
  phone: String
  taxNumber: String
  stores: StoreRelateToManyForUpdateInput
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  name: String
  companyName: String
  email: String
  phone: String
  taxNumber: String
  stores: StoreRelateToManyForCreateInput
}

type Payment {
  id: ID!
  store: Store
  amount: Decimal
  paymentDate: DateTime
  month: String
  year: String
  status: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  store: StoreWhereInput
  amount: DecimalFilter
  paymentDate: DateTimeNullableFilter
  month: StringFilter
  year: StringFilter
  status: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  paymentDate: OrderDirection
  month: OrderDirection
  year: OrderDirection
  status: OrderDirection
}

input PaymentUpdateInput {
  store: StoreRelateToOneForUpdateInput
  amount: Decimal
  paymentDate: DateTime
  month: String
  year: String
  status: String
}

input StoreRelateToOneForUpdateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  store: StoreRelateToOneForCreateInput
  amount: Decimal
  paymentDate: DateTime
  month: String
  year: String
  status: String
}

input StoreRelateToOneForCreateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createMall(data: MallCreateInput!): Mall
  createMalls(data: [MallCreateInput!]!): [Mall]
  updateMall(where: MallWhereUniqueInput!, data: MallUpdateInput!): Mall
  updateMalls(data: [MallUpdateArgs!]!): [Mall]
  deleteMall(where: MallWhereUniqueInput!): Mall
  deleteMalls(where: [MallWhereUniqueInput!]!): [Mall]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  mall(where: MallWhereUniqueInput!): Mall
  malls(where: MallWhereInput! = {}, orderBy: [MallOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MallWhereUniqueInput): [Mall!]
  mallsCount(where: MallWhereInput! = {}): Int
  store(where: StoreWhereUniqueInput!): Store
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreWhereUniqueInput): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  client(where: ClientWhereUniqueInput!): Client
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientsCount(where: ClientWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
